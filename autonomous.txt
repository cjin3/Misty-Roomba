misty.Debug("roomba mode");

let time = 100000000;
let foundWall = false;



autonomous();

function autonomous(){
    misty.AddPropertyTest("FrontTOFWall", "SensorPosition", "==", "Center", "string");
    misty.AddPropertyTest("FrontTOFWall", "type", "==", "Range", "string"); 
    misty.AddPropertyTest("FrontTOFWall", "DistanceInMeters", "<=", 0.2, "double");
    misty.RegisterEvent("FrontTOFWall", "TimeOfFlight", 1);

    misty.AddPropertyTest("FrontTOFNoWall", "SensorPosition", "==", "Center", "string");
    misty.AddPropertyTest("FrontTOFNoWall", "type", "==", "Range", "string"); 
    misty.AddPropertyTest("FrontTOFNoWall", "DistanceInMeters", ">", 0.2, "double");
    misty.RegisterEvent("FrontTOFNoWall", "TimeOfFlight", 1000);
    if (!foundWall){
        misty.DriveTime(10, 0, 1000);
        autonomous();
    }
    else{turn();}
}

function _FrontTOFWall(data){
    let frontTOF = data.PropertyTestResults[0].PropertyParent;
    misty.Debug("Found Wall!");
    misty.Debug(frontTOF.DistanceInMeters);
    foundWall = true;
}

function _FrontTOFNoWall(data){
    let frontTOF = data.PropertyTestResults[0].PropertyParent;
    misty.Debug("No More Wall!");
    misty.Debug(frontTOF.DistanceInMeters);
    foundWall = false;
}

function turn(){
    misty.DriveTime(0, 30, 10000);
}